rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Users collection: Allow users to read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Products collection: Allow anyone to read, but only logged-in users to create,
    // and only the seller to update or delete their own product.
    match /products/{productId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.sellerId;
    }

    // Banners collection: Allow anyone to read.
    match /banners/{bannerId} {
      allow read: if true;
    }
    
    // Notifications collection: Users can only read, write, and delete their own notifications.
    match /notifications/{notificationId} {
      allow read, write, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Reviews collection: Allow anyone to read reviews. Allow any signed-in user to create a review.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn();
    }

    // Conversations collection and its subcollections
    match /conversations/{conversationId} {
      
      // READ, LIST: A user can get or list conversations only if they are a participant.
      // The `list` rule is crucial and now correctly implemented. We check the query itself.
      allow list: if isSignedIn() && request.query.where.size() > 0 && 
                   'participantIds' in request.query.where[0] &&
                   request.query.where[0].participantIds == request.auth.uid;
      allow get: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      // CREATE: A user can create a conversation if they are signed in and
      // their UID is included in the new conversation's participant list.
      // This prevents users from creating conversations for others.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;

      // UPDATE: A user can update a conversation (e.g., lastMessage, unreadCounts, hiddenFor)
      // if they are a participant.
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      // DELETE: A user can delete a conversation if they are a participant.
      // This rule is used by the server action for final deletion.
      allow delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      // Messages subcollection
      match /messages/{messageId} {
        // READ, LIST: A user can get or list messages only if they are a participant
        // in the parent conversation. This uses `get()` to check the parent doc.
        allow read, list: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // CREATE: A user can create a message if they are a participant in the parent conversation.
        allow create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }
  }
}
