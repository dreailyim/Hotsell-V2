
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNewerThan(existingData) {
       return request.time > existingData.createdAt;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Rules for 'products' collection
    match /products/{productId} {
      allow read: if resource.data.visibility == 'public' || isOwner(resource.data.sellerId);
      allow create: if request.auth.uid != null && isOwner(request.resource.data.sellerId);
      allow update: if isOwner(resource.data.sellerId);
      allow delete: if isOwner(resource.data.sellerId);
    }
    
    // Rules for 'reviews' collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth.uid != null && isOwner(request.resource.data.reviewerId);
      allow update, delete: if isOwner(request.resource.data.reviewerId);
    }
    
    // Rules for 'conversations' collection and its subcollections
    match /conversations/{conversationId} {
      allow read, create, update, delete: if request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        allow update, delete: if false; // Disallow editing/deleting messages
      }
    }
    
    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
       allow read, update, delete: if isOwner(resource.data.userId);
       // Notifications are created by Cloud Functions, not directly by users
       allow create: if false;
    }
    
    // Rules for 'banners' collection
    match /banners/{bannerId} {
      allow read: if true;
      // Allow create only if the user is authenticated and the timestamp is from the server
      allow create: if request.auth != null && request.resource.data.createdAt == request.time;
      // Allow update/delete only for authenticated users (admins)
      allow update, delete: if request.auth != null;
    }
  }
}
