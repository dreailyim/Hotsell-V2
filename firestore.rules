rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Products collection can be read by anyone, but only created/updated/deleted by the seller.
    match /products/{productId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.sellerId == request.auth.uid;
    }

    // Users collection can be read by any signed-in user, but only updated by the owner.
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == userId;
    }
    
    // Conversations can only be accessed by participants.
    match /conversations/{conversationId} {
      // READ: A user can read a conversation if they are a participant.
      allow read: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      
      // CREATE: A user can create a conversation if they are signed in and are one of the participants in the new document.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      
      // UPDATE: A user can update a conversation (e.g., last message, bid status) if they are a participant.
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      
      // DELETE: Don't allow deletion for now to preserve chat history, rely on "hiddenFor" logic.
      allow delete: if false;

      // Messages subcollection can only be accessed by participants of the parent conversation.
      match /messages/{messageId} {
        // READ: A user can read messages if they are a participant in the parent conversation.
        allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        
        // CREATE: A user can create a message if they are a participant in the parent conversation.
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    // Reviews can be read by anyone, but only created by a signed-in user.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.reviewerId == request.auth.uid;
      // Users should not be able to update or delete reviews.
      allow update, delete: if false;
    }
    
    // Banners can be read by anyone. Writing should be restricted (e.g., to admins in the future).
    match /banners/{bannerId} {
        allow read: if true;
        allow write: if false; // For now, prevent client-side writes.
    }
    
    // Notifications can only be accessed by the designated user.
    match /notifications/{notificationId} {
      allow read, update, delete, list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn(); // Allow server-side functions to create notifications.
    }
  }
}
