rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    // Users can be read by any signed in user, but only written by themselves.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Products are public, but can only be created, updated, or deleted by the seller.
    match /products/{productId} {
      allow read: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.sellerId;
    }
    
    // Banners are public, but only admin can write (not implemented yet, so write is denied)
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if false; 
    }

    // Conversations can only be listed/read/updated by participants.
    // Anyone signed in can create a conversation, but the rules ensure they must be a participant.
    match /conversations/{conversationId} {
      allow get, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.auth.uid in request.query.filters.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;

      // Messages can only be read/created by participants of the parent conversation.
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }
    
    // Reviews are public, but can only be created by signed-in users.
    match /reviews/{reviewId} {
        allow read: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false; // Reviews are immutable
    }

    // Notifications can only be accessed by the recipient user.
    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow create: if isSignedIn();
    }
  }
}
