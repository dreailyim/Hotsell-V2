
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Products: Allow anyone to read, but only the seller to write/delete.
    match /products/{productId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.sellerId;
    }

    // Users: Allow anyone to read public profiles, but only the user themselves to update.
    match /users/{userId} {
      allow get; // Allow reading a single user's public profile
      allow update: if isSignedIn() && request.auth.uid == userId;
    }
    
    // Reviews: Allow anyone to read. Allow signed-in users to create.
    // Only the reviewer can update or delete their own review.
    match /reviews/{reviewId} {
        allow read;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && request.auth.uid == resource.data.reviewerId;
    }
    
    // Notifications: Only the user can read their own notifications. No one can write them directly.
    match /notifications/{notificationId} {
        allow read, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Conversations & Messages
    match /conversations/{conversationId} {
      // Allow a user to get a specific conversation document if they are a participant.
      allow get, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      
      // Allow a user to list conversations only if they are querying for conversations they participate in.
      // This is a broader rule, but client-side queries MUST be secure.
      allow list: if isSignedIn();

      // Allow a signed-in user to create a new conversation, but only if they are one of the participants.
      // And ensure the other participant is not themselves.
      allow create: if isSignedIn() 
                    && request.auth.uid in request.resource.data.participantIds
                    && request.resource.data.participantIds.size() == 2;
      
      // Allow deletion only by participants. The server action will handle the logic
      // of soft vs. hard delete.
      allow delete: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      // Messages subcollection
      match /messages/{messageId} {
        // A user can only read messages if they are a participant of the parent conversation.
        allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        
        // A user can only create a message if they are a participant of the parent conversation.
        allow create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }
  }
}
