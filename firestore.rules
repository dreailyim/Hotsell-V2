rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // --- Users Collection ---
    // Anyone can read a user's public profile.
    // Only the user themselves can create or update their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // --- Products Collection ---
    // Anyone can read products.
    // Only logged-in users can create a product for themselves.
    // Updates are complex:
    //   - The seller can update any field EXCEPT the favorite fields.
    //   - Any other logged-in user can ONLY update the favorite fields.
    match /products/{productId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.sellerId;
      
      allow update: if isSignedIn() && (
        // Case 1: The user is the seller.
        (request.auth.uid == resource.data.sellerId &&
         !('favoritedBy' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('favorites' in request.resource.data.diff(resource.data).affectedKeys())) ||

        // Case 2: The user is NOT the seller, and is only updating favorite fields.
        (request.auth.uid != resource.data.sellerId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['favoritedBy', 'favorites']))
      );
      
      allow delete: if isSignedIn() && request.auth.uid == resource.data.sellerId;
    }

    // --- Conversations and Messages ---
    // Users can only read, create, or update conversations they are a part of.
    // The `list` rule is crucial for querying conversations.
    match /conversations/{conversationId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      
      // Allow querying conversations where the current user is a participant.
      allow list: if isSignedIn() && request.auth.uid in request.query.where.participantIds;

      // Allow creating a conversation if the user is signed in and is one of the participants in the new conversation document.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;

      // Messages can be read by participants.
      // Messages can be created by a participant, as long as they are the sender.
      match /messages/{messageId} {
        allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId;
      }
    }
    
    // --- Reviews Collection ---
    // Anyone can read reviews.
    // Only logged-in users can create reviews.
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.reviewerId;
    }
    
    // --- Notifications Collection ---
    // Users can only read and update their own notifications.
    match /notifications/{notificationId} {
        allow read, update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
     // --- Banners Collection ---
    // Anyone can read banners. Write access should be restricted (e.g., admin only, not implemented here).
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if false; // Protect banners from client-side modification
    }
  }
}
