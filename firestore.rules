rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Users ---
    // Users can read anyone's public profile.
    // Users can only create and update their own user document.
    match /users/{userId} {
      allow read;
      allow create, update: if request.auth.uid == userId;
    }

    // --- Products ---
    // Anyone can read products.
    // Logged-in users can create products.
    // Users can only update or delete their own products.
    match /products/{productId} {
      allow read;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
    }
    
    // --- Conversations & Messages ---
    // Participants of a conversation can read/write to it.
    // This uses a helper function to check for participation.
    match /conversations/{conversationId} {
      allow read, create, update: if isParticipant(conversationId);

      // Messages can be created by participants.
      // Reading messages is handled by the parent conversation rule.
      match /messages/{messageId} {
        allow read, create: if isParticipant(conversationId);
      }
    }
    
    // --- Reviews ---
    // Logged-in users can read reviews.
    // Logged-in users can create reviews.
    match /reviews/{reviewId} {
      allow read;
      allow create: if request.auth != null;
    }

    // --- Notifications ---
    // Users can only read and update (mark as read) their own notifications.
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      // Creation is handled by backend Cloud Functions.
    }
    
    // --- Helper Functions ---
    function isParticipant(conversationId) {
      return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }
  }
}
