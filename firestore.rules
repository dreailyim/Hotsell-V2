rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      
      // Complex update rule to handle both seller edits and user favorites
      allow update: if isSignedIn() && (
        // SCENARIO 1: The user is the seller of the item.
        (request.auth.uid == resource.data.sellerId &&
          // The seller is NOT allowed to modify the favorite fields.
          !('favoritedBy' in request.resource.data.diff(resource.data).affectedKeys()) &&
          !('favorites' in request.resource.data.diff(resource.data).affectedKeys())
        ) ||
        // SCENARIO 2: The user is NOT the seller (e.g., favoriting an item).
        (request.auth.uid != resource.data.sellerId &&
          // They are ONLY allowed to modify the 'favoritedBy' and 'favorites' fields.
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['favoritedBy', 'favorites'])
        )
      );
        
      allow delete: if isSignedIn() && request.auth.uid == resource.data.sellerId;
    }

    // Rules for the 'conversations' collection
    match /conversations/{conversationId} {
      // Users can only read/write conversations they are a part of.
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      // Users can only create conversations where they are a participant.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      // A user can only query for conversations they are a part of.
      allow list: if isSignedIn() && request.auth.uid in request.query.where.participantIds;

      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // Participants can read/write messages in their own conversations.
        allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        // Participants can create messages in their own conversations.
        allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    // Rules for the 'reviews' collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.reviewerId == request.auth.uid;
      allow update, delete: if false; // Reviews are immutable
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create, delete: if false; // Notifications are system-generated and not user-deletable
    }

    // Rules for the 'banners' collection
    match /banners/{bannerId} {
        allow read: if true;
        allow write: if false; // Banners should be managed from the console
    }
  }
}
