rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function
    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
    }

    match /products/{productId} {
      allow read;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.sellerId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.sellerId;

      // Update rules for products
      allow update: if
          // SCENARIO 1: The user is the seller of the product.
          (isSignedIn() && request.auth.uid == resource.data.sellerId &&
            // Sellers should not be able to directly modify the favorite fields.
            // This prevents them from artificially inflating likes.
            !('favoritedBy' in request.resource.data.diff(resource.data).affectedKeys()) &&
            !('favorites' in request.resource.data.diff(resource.data).affectedKeys())
          ) ||
          // SCENARIO 2: The user is NOT the seller (i.e., a potential buyer).
          (isSignedIn() && request.auth.uid != resource.data.sellerId &&
            // They are ONLY allowed to modify the 'favoritedBy' and 'favorites' fields.
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['favoritedBy', 'favorites']) &&
            // Also ensure they are not changing other sensitive fields
            request.resource.data.name == resource.data.name &&
            request.resource.data.price == resource.data.price &&
            request.resource.data.sellerId == resource.data.sellerId
          );
    }

    match /conversations/{conversationId} {
      // Users can only query for conversations they are a part of.
      allow list: if isSignedIn() && request.auth.uid in request.query.where.participantIds;
      
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    match /reviews/{reviewId} {
      allow read;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.reviewerId;
    }

    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if isSignedIn() && request.auth.uid == request.query.where.userId;
    }
  }
}
