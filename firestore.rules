
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow public read for products and users
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow logged-in users to update only the 'favoritedBy' and 'favorites' fields.
      // The update must contain at least one of these keys and no more than these two keys.
      allow update: if request.auth != null && 
                       request.resource.data.diff(resource.data).affectedKeys().hasAny(['favoritedBy', 'favorites']) &&
                       request.resource.data.diff(resource.data).affectedKeys().size() <= 2;
      allow delete: if request.auth != null && resource.data.sellerId == request.auth.uid;
    }
    match /users/{userId} {
        allow read: if true;
        allow create: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId;
    }
    
    // Allow read/write for owners of conversations
    match /conversations/{conversationId} {
        allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }
    
    // Allow users to create reviews
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
    }
    
    // Notifications can be read and updated (to mark as read) by the owner
    match /notifications/{notificationId} {
        allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Banners can be read by anyone
    match /banners/{bannerId} {
        allow read: if true;
    }
  }
}
